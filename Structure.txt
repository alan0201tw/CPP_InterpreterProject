Pascal Interpreter Project

Target Usage
{
    lexer = Lexer(text)
    parser = Parser(lexer)
    interpreter = Interpreter(parser)
    result = interpreter.interpret()
    print(result)
}

1. Lexer
{
    Contain Token-related library.
    Including TokenType enum and Token classes.

    Lexer itself contains a "get_next_token" method for external usage.

    All tokens contain a string value, can be a integer string or float string or character string.
}

2. Parser
{
    Contain AST_Node class and Operator class.
    Parser itself contains a "Parse" method, which will parse the tokens generated by Lexer to a AST.
}

3. Interpreter
{
    Visit the AST made by Parser, and operate using nodes.
    Finally output value.
}

Possible Structure : 

TypeClass : 

    TypeBase > Void Type, Int type, Float type... etc
    {
        TypeBase contains a enum, each enum maps to a sub Type class.
        Each of them have basic opertators to each other.

        TypeBase + TypeBase > Int + Float > Float
                            > String + Int > String
    }

virtaul ValueBase
{
    void* data
    ValutType enum;
}

Visit()
{
    if node.type == Inte..
        (int*)data
}

IntValue : ValueBase
{
    
}

FloatValue

Note :

    If trying to read float values, try this approach : 
        GetNumericString() > Get(".") > GetNumericString()
        then combine these strings to make a float string